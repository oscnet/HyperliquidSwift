// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(hyperliquidFFI)
import hyperliquidFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_hyperliquid_swift_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_hyperliquid_swift_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T>: @unchecked Sendable {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol HyperliquidExchangeProtocol : AnyObject {
    
    func cancelAllOrders(asset: String?) throws  -> String
    
    func cancelAllOrdersAsync(asset: String?) async throws  -> String
    
    func cancelOrder(cancel: CancelRequest) throws  -> String
    
    func cancelOrderAsync(cancel: CancelRequest) async throws  -> String
    
    func getWalletAddress()  -> String
    
    func placeOrder(order: OrderRequest) throws  -> String
    
    func placeOrderAsync(order: OrderRequest) async throws  -> String
    
}

open class HyperliquidExchange:
    HyperliquidExchangeProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_hyperliquid_swift_fn_clone_hyperliquidexchange(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_hyperliquid_swift_fn_free_hyperliquidexchange(pointer, $0) }
    }

    

    
open func cancelAllOrders(asset: String?)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeHyperliquidError.lift) {
    uniffi_hyperliquid_swift_fn_method_hyperliquidexchange_cancel_all_orders(self.uniffiClonePointer(),
        FfiConverterOptionString.lower(asset),$0
    )
})
}
    
open func cancelAllOrdersAsync(asset: String?)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_hyperliquid_swift_fn_method_hyperliquidexchange_cancel_all_orders_async(
                    self.uniffiClonePointer(),
                    FfiConverterOptionString.lower(asset)
                )
            },
            pollFunc: ffi_hyperliquid_swift_rust_future_poll_rust_buffer,
            completeFunc: ffi_hyperliquid_swift_rust_future_complete_rust_buffer,
            freeFunc: ffi_hyperliquid_swift_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeHyperliquidError.lift
        )
}
    
open func cancelOrder(cancel: CancelRequest)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeHyperliquidError.lift) {
    uniffi_hyperliquid_swift_fn_method_hyperliquidexchange_cancel_order(self.uniffiClonePointer(),
        FfiConverterTypeCancelRequest.lower(cancel),$0
    )
})
}
    
open func cancelOrderAsync(cancel: CancelRequest)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_hyperliquid_swift_fn_method_hyperliquidexchange_cancel_order_async(
                    self.uniffiClonePointer(),
                    FfiConverterTypeCancelRequest.lower(cancel)
                )
            },
            pollFunc: ffi_hyperliquid_swift_rust_future_poll_rust_buffer,
            completeFunc: ffi_hyperliquid_swift_rust_future_complete_rust_buffer,
            freeFunc: ffi_hyperliquid_swift_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeHyperliquidError.lift
        )
}
    
open func getWalletAddress() -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_hyperliquid_swift_fn_method_hyperliquidexchange_get_wallet_address(self.uniffiClonePointer(),$0
    )
})
}
    
open func placeOrder(order: OrderRequest)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeHyperliquidError.lift) {
    uniffi_hyperliquid_swift_fn_method_hyperliquidexchange_place_order(self.uniffiClonePointer(),
        FfiConverterTypeOrderRequest.lower(order),$0
    )
})
}
    
open func placeOrderAsync(order: OrderRequest)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_hyperliquid_swift_fn_method_hyperliquidexchange_place_order_async(
                    self.uniffiClonePointer(),
                    FfiConverterTypeOrderRequest.lower(order)
                )
            },
            pollFunc: ffi_hyperliquid_swift_rust_future_poll_rust_buffer,
            completeFunc: ffi_hyperliquid_swift_rust_future_complete_rust_buffer,
            freeFunc: ffi_hyperliquid_swift_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeHyperliquidError.lift
        )
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHyperliquidExchange: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = HyperliquidExchange

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> HyperliquidExchange {
        return HyperliquidExchange(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: HyperliquidExchange) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HyperliquidExchange {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: HyperliquidExchange, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHyperliquidExchange_lift(_ pointer: UnsafeMutableRawPointer) throws -> HyperliquidExchange {
    return try FfiConverterTypeHyperliquidExchange.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHyperliquidExchange_lower(_ value: HyperliquidExchange) -> UnsafeMutableRawPointer {
    return FfiConverterTypeHyperliquidExchange.lower(value)
}




public protocol HyperliquidInfoProtocol : AnyObject {
    
    func getAllMids() throws  -> [String: String]
    
    func getAllMidsAsync() async throws  -> [String: String]
    
    func getOpenOrders(address: String) throws  -> [OpenOrder]
    
    func getOpenOrdersAsync(address: String) async throws  -> [OpenOrder]
    
    func getUserBalances(address: String) throws  -> [UserBalance]
    
    func getUserBalancesAsync(address: String) async throws  -> [UserBalance]
    
    func getUserState(address: String) throws  -> UserState
    
    func getUserStateAsync(address: String) async throws  -> UserState
    
}

open class HyperliquidInfo:
    HyperliquidInfoProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_hyperliquid_swift_fn_clone_hyperliquidinfo(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_hyperliquid_swift_fn_free_hyperliquidinfo(pointer, $0) }
    }

    

    
open func getAllMids()throws  -> [String: String] {
    return try  FfiConverterDictionaryStringString.lift(try rustCallWithError(FfiConverterTypeHyperliquidError.lift) {
    uniffi_hyperliquid_swift_fn_method_hyperliquidinfo_get_all_mids(self.uniffiClonePointer(),$0
    )
})
}
    
open func getAllMidsAsync()async throws  -> [String: String] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_hyperliquid_swift_fn_method_hyperliquidinfo_get_all_mids_async(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_hyperliquid_swift_rust_future_poll_rust_buffer,
            completeFunc: ffi_hyperliquid_swift_rust_future_complete_rust_buffer,
            freeFunc: ffi_hyperliquid_swift_rust_future_free_rust_buffer,
            liftFunc: FfiConverterDictionaryStringString.lift,
            errorHandler: FfiConverterTypeHyperliquidError.lift
        )
}
    
open func getOpenOrders(address: String)throws  -> [OpenOrder] {
    return try  FfiConverterSequenceTypeOpenOrder.lift(try rustCallWithError(FfiConverterTypeHyperliquidError.lift) {
    uniffi_hyperliquid_swift_fn_method_hyperliquidinfo_get_open_orders(self.uniffiClonePointer(),
        FfiConverterString.lower(address),$0
    )
})
}
    
open func getOpenOrdersAsync(address: String)async throws  -> [OpenOrder] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_hyperliquid_swift_fn_method_hyperliquidinfo_get_open_orders_async(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(address)
                )
            },
            pollFunc: ffi_hyperliquid_swift_rust_future_poll_rust_buffer,
            completeFunc: ffi_hyperliquid_swift_rust_future_complete_rust_buffer,
            freeFunc: ffi_hyperliquid_swift_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeOpenOrder.lift,
            errorHandler: FfiConverterTypeHyperliquidError.lift
        )
}
    
open func getUserBalances(address: String)throws  -> [UserBalance] {
    return try  FfiConverterSequenceTypeUserBalance.lift(try rustCallWithError(FfiConverterTypeHyperliquidError.lift) {
    uniffi_hyperliquid_swift_fn_method_hyperliquidinfo_get_user_balances(self.uniffiClonePointer(),
        FfiConverterString.lower(address),$0
    )
})
}
    
open func getUserBalancesAsync(address: String)async throws  -> [UserBalance] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_hyperliquid_swift_fn_method_hyperliquidinfo_get_user_balances_async(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(address)
                )
            },
            pollFunc: ffi_hyperliquid_swift_rust_future_poll_rust_buffer,
            completeFunc: ffi_hyperliquid_swift_rust_future_complete_rust_buffer,
            freeFunc: ffi_hyperliquid_swift_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypeUserBalance.lift,
            errorHandler: FfiConverterTypeHyperliquidError.lift
        )
}
    
open func getUserState(address: String)throws  -> UserState {
    return try  FfiConverterTypeUserState.lift(try rustCallWithError(FfiConverterTypeHyperliquidError.lift) {
    uniffi_hyperliquid_swift_fn_method_hyperliquidinfo_get_user_state(self.uniffiClonePointer(),
        FfiConverterString.lower(address),$0
    )
})
}
    
open func getUserStateAsync(address: String)async throws  -> UserState {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_hyperliquid_swift_fn_method_hyperliquidinfo_get_user_state_async(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(address)
                )
            },
            pollFunc: ffi_hyperliquid_swift_rust_future_poll_rust_buffer,
            completeFunc: ffi_hyperliquid_swift_rust_future_complete_rust_buffer,
            freeFunc: ffi_hyperliquid_swift_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeUserState.lift,
            errorHandler: FfiConverterTypeHyperliquidError.lift
        )
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHyperliquidInfo: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = HyperliquidInfo

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> HyperliquidInfo {
        return HyperliquidInfo(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: HyperliquidInfo) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HyperliquidInfo {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: HyperliquidInfo, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHyperliquidInfo_lift(_ pointer: UnsafeMutableRawPointer) throws -> HyperliquidInfo {
    return try FfiConverterTypeHyperliquidInfo.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHyperliquidInfo_lower(_ value: HyperliquidInfo) -> UnsafeMutableRawPointer {
    return FfiConverterTypeHyperliquidInfo.lower(value)
}


public struct CancelRequest {
    public var asset: String
    public var oid: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(asset: String, oid: UInt64) {
        self.asset = asset
        self.oid = oid
    }
}



extension CancelRequest: Equatable, Hashable {
    public static func ==(lhs: CancelRequest, rhs: CancelRequest) -> Bool {
        if lhs.asset != rhs.asset {
            return false
        }
        if lhs.oid != rhs.oid {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(asset)
        hasher.combine(oid)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCancelRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CancelRequest {
        return
            try CancelRequest(
                asset: FfiConverterString.read(from: &buf), 
                oid: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: CancelRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.asset, into: &buf)
        FfiConverterUInt64.write(value.oid, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCancelRequest_lift(_ buf: RustBuffer) throws -> CancelRequest {
    return try FfiConverterTypeCancelRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCancelRequest_lower(_ value: CancelRequest) -> RustBuffer {
    return FfiConverterTypeCancelRequest.lower(value)
}


public struct OpenOrder {
    public var asset: String
    public var isBuy: Bool
    public var size: Double
    public var price: Double
    public var oid: UInt64
    public var timestamp: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(asset: String, isBuy: Bool, size: Double, price: Double, oid: UInt64, timestamp: UInt64) {
        self.asset = asset
        self.isBuy = isBuy
        self.size = size
        self.price = price
        self.oid = oid
        self.timestamp = timestamp
    }
}



extension OpenOrder: Equatable, Hashable {
    public static func ==(lhs: OpenOrder, rhs: OpenOrder) -> Bool {
        if lhs.asset != rhs.asset {
            return false
        }
        if lhs.isBuy != rhs.isBuy {
            return false
        }
        if lhs.size != rhs.size {
            return false
        }
        if lhs.price != rhs.price {
            return false
        }
        if lhs.oid != rhs.oid {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(asset)
        hasher.combine(isBuy)
        hasher.combine(size)
        hasher.combine(price)
        hasher.combine(oid)
        hasher.combine(timestamp)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOpenOrder: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OpenOrder {
        return
            try OpenOrder(
                asset: FfiConverterString.read(from: &buf), 
                isBuy: FfiConverterBool.read(from: &buf), 
                size: FfiConverterDouble.read(from: &buf), 
                price: FfiConverterDouble.read(from: &buf), 
                oid: FfiConverterUInt64.read(from: &buf), 
                timestamp: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: OpenOrder, into buf: inout [UInt8]) {
        FfiConverterString.write(value.asset, into: &buf)
        FfiConverterBool.write(value.isBuy, into: &buf)
        FfiConverterDouble.write(value.size, into: &buf)
        FfiConverterDouble.write(value.price, into: &buf)
        FfiConverterUInt64.write(value.oid, into: &buf)
        FfiConverterUInt64.write(value.timestamp, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOpenOrder_lift(_ buf: RustBuffer) throws -> OpenOrder {
    return try FfiConverterTypeOpenOrder.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOpenOrder_lower(_ value: OpenOrder) -> RustBuffer {
    return FfiConverterTypeOpenOrder.lower(value)
}


public struct OrderRequest {
    public var asset: String
    public var isBuy: Bool
    public var size: Double
    public var price: Double
    public var reduceOnly: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(asset: String, isBuy: Bool, size: Double, price: Double, reduceOnly: Bool) {
        self.asset = asset
        self.isBuy = isBuy
        self.size = size
        self.price = price
        self.reduceOnly = reduceOnly
    }
}



extension OrderRequest: Equatable, Hashable {
    public static func ==(lhs: OrderRequest, rhs: OrderRequest) -> Bool {
        if lhs.asset != rhs.asset {
            return false
        }
        if lhs.isBuy != rhs.isBuy {
            return false
        }
        if lhs.size != rhs.size {
            return false
        }
        if lhs.price != rhs.price {
            return false
        }
        if lhs.reduceOnly != rhs.reduceOnly {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(asset)
        hasher.combine(isBuy)
        hasher.combine(size)
        hasher.combine(price)
        hasher.combine(reduceOnly)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOrderRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OrderRequest {
        return
            try OrderRequest(
                asset: FfiConverterString.read(from: &buf), 
                isBuy: FfiConverterBool.read(from: &buf), 
                size: FfiConverterDouble.read(from: &buf), 
                price: FfiConverterDouble.read(from: &buf), 
                reduceOnly: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: OrderRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.asset, into: &buf)
        FfiConverterBool.write(value.isBuy, into: &buf)
        FfiConverterDouble.write(value.size, into: &buf)
        FfiConverterDouble.write(value.price, into: &buf)
        FfiConverterBool.write(value.reduceOnly, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOrderRequest_lift(_ buf: RustBuffer) throws -> OrderRequest {
    return try FfiConverterTypeOrderRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOrderRequest_lower(_ value: OrderRequest) -> RustBuffer {
    return FfiConverterTypeOrderRequest.lower(value)
}


public struct UserBalance {
    public var token: String
    public var hold: Double
    public var total: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(token: String, hold: Double, total: Double) {
        self.token = token
        self.hold = hold
        self.total = total
    }
}



extension UserBalance: Equatable, Hashable {
    public static func ==(lhs: UserBalance, rhs: UserBalance) -> Bool {
        if lhs.token != rhs.token {
            return false
        }
        if lhs.hold != rhs.hold {
            return false
        }
        if lhs.total != rhs.total {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(token)
        hasher.combine(hold)
        hasher.combine(total)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUserBalance: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserBalance {
        return
            try UserBalance(
                token: FfiConverterString.read(from: &buf), 
                hold: FfiConverterDouble.read(from: &buf), 
                total: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: UserBalance, into buf: inout [UInt8]) {
        FfiConverterString.write(value.token, into: &buf)
        FfiConverterDouble.write(value.hold, into: &buf)
        FfiConverterDouble.write(value.total, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserBalance_lift(_ buf: RustBuffer) throws -> UserBalance {
    return try FfiConverterTypeUserBalance.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserBalance_lower(_ value: UserBalance) -> RustBuffer {
    return FfiConverterTypeUserBalance.lower(value)
}


public struct UserState {
    public var address: String
    public var marginSummaryEquity: Double
    public var marginSummaryAccountValue: Double
    public var marginSummaryTotalMarginUsed: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(address: String, marginSummaryEquity: Double, marginSummaryAccountValue: Double, marginSummaryTotalMarginUsed: Double) {
        self.address = address
        self.marginSummaryEquity = marginSummaryEquity
        self.marginSummaryAccountValue = marginSummaryAccountValue
        self.marginSummaryTotalMarginUsed = marginSummaryTotalMarginUsed
    }
}



extension UserState: Equatable, Hashable {
    public static func ==(lhs: UserState, rhs: UserState) -> Bool {
        if lhs.address != rhs.address {
            return false
        }
        if lhs.marginSummaryEquity != rhs.marginSummaryEquity {
            return false
        }
        if lhs.marginSummaryAccountValue != rhs.marginSummaryAccountValue {
            return false
        }
        if lhs.marginSummaryTotalMarginUsed != rhs.marginSummaryTotalMarginUsed {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address)
        hasher.combine(marginSummaryEquity)
        hasher.combine(marginSummaryAccountValue)
        hasher.combine(marginSummaryTotalMarginUsed)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUserState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserState {
        return
            try UserState(
                address: FfiConverterString.read(from: &buf), 
                marginSummaryEquity: FfiConverterDouble.read(from: &buf), 
                marginSummaryAccountValue: FfiConverterDouble.read(from: &buf), 
                marginSummaryTotalMarginUsed: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: UserState, into buf: inout [UInt8]) {
        FfiConverterString.write(value.address, into: &buf)
        FfiConverterDouble.write(value.marginSummaryEquity, into: &buf)
        FfiConverterDouble.write(value.marginSummaryAccountValue, into: &buf)
        FfiConverterDouble.write(value.marginSummaryTotalMarginUsed, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserState_lift(_ buf: RustBuffer) throws -> UserState {
    return try FfiConverterTypeUserState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserState_lower(_ value: UserState) -> RustBuffer {
    return FfiConverterTypeUserState.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum BaseUrl {
    
    case mainnet
    case testnet
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBaseUrl: FfiConverterRustBuffer {
    typealias SwiftType = BaseUrl

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BaseUrl {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .mainnet
        
        case 2: return .testnet
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BaseUrl, into buf: inout [UInt8]) {
        switch value {
        
        
        case .mainnet:
            writeInt(&buf, Int32(1))
        
        
        case .testnet:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBaseUrl_lift(_ buf: RustBuffer) throws -> BaseUrl {
    return try FfiConverterTypeBaseUrl.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBaseUrl_lower(_ value: BaseUrl) -> RustBuffer {
    return FfiConverterTypeBaseUrl.lower(value)
}



extension BaseUrl: Equatable, Hashable {}




public enum HyperliquidError {

    
    
    case InvalidPrivateKey(message: String
    )
    case NetworkError(message: String
    )
    case ApiError(message: String
    )
    case InvalidInput(message: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHyperliquidError: FfiConverterRustBuffer {
    typealias SwiftType = HyperliquidError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HyperliquidError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidPrivateKey(
            message: try FfiConverterString.read(from: &buf)
            )
        case 2: return .NetworkError(
            message: try FfiConverterString.read(from: &buf)
            )
        case 3: return .ApiError(
            message: try FfiConverterString.read(from: &buf)
            )
        case 4: return .InvalidInput(
            message: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: HyperliquidError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .InvalidPrivateKey(message):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(message, into: &buf)
            
        
        case let .NetworkError(message):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(message, into: &buf)
            
        
        case let .ApiError(message):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(message, into: &buf)
            
        
        case let .InvalidInput(message):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(message, into: &buf)
            
        }
    }
}


extension HyperliquidError: Equatable, Hashable {}

extension HyperliquidError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeOpenOrder: FfiConverterRustBuffer {
    typealias SwiftType = [OpenOrder]

    public static func write(_ value: [OpenOrder], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeOpenOrder.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [OpenOrder] {
        let len: Int32 = try readInt(&buf)
        var seq = [OpenOrder]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeOpenOrder.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeUserBalance: FfiConverterRustBuffer {
    typealias SwiftType = [UserBalance]

    public static func write(_ value: [UserBalance], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeUserBalance.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UserBalance] {
        let len: Int32 = try readInt(&buf)
        var seq = [UserBalance]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeUserBalance.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringString: FfiConverterRustBuffer {
    public static func write(_ value: [String: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: String] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}
public func createExchangeClient(privateKey: String, baseUrl: BaseUrl)throws  -> HyperliquidExchange {
    return try  FfiConverterTypeHyperliquidExchange.lift(try rustCallWithError(FfiConverterTypeHyperliquidError.lift) {
    uniffi_hyperliquid_swift_fn_func_create_exchange_client(
        FfiConverterString.lower(privateKey),
        FfiConverterTypeBaseUrl.lower(baseUrl),$0
    )
})
}
public func createInfoClient(baseUrl: BaseUrl)throws  -> HyperliquidInfo {
    return try  FfiConverterTypeHyperliquidInfo.lift(try rustCallWithError(FfiConverterTypeHyperliquidError.lift) {
    uniffi_hyperliquid_swift_fn_func_create_info_client(
        FfiConverterTypeBaseUrl.lower(baseUrl),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_hyperliquid_swift_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_func_create_exchange_client() != 59663) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_func_create_info_client() != 34613) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidexchange_cancel_all_orders() != 41162) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidexchange_cancel_all_orders_async() != 28691) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidexchange_cancel_order() != 30438) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidexchange_cancel_order_async() != 54346) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidexchange_get_wallet_address() != 31106) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidexchange_place_order() != 36280) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidexchange_place_order_async() != 19762) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidinfo_get_all_mids() != 13180) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidinfo_get_all_mids_async() != 59295) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidinfo_get_open_orders() != 41245) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidinfo_get_open_orders_async() != 45409) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidinfo_get_user_balances() != 54696) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidinfo_get_user_balances_async() != 51031) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidinfo_get_user_state() != 26354) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_swift_checksum_method_hyperliquidinfo_get_user_state_async() != 24127) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all